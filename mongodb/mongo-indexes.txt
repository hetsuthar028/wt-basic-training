// Sample Document
------------------------------------------------------------------------------------
{
  "_id": ObjectId("570c04a4ad233577f97dc459"),
  "score": 1034,
  "location": { state: "NY", city: "New York" }
}

------------------------------------------------------------------------------------
## Single Field Index
------------------------------------------------------------------------------------
- By default applied on _id Field
- Allows indexing on ascending/descending order

    ### Create an Ascending Index on a single Field
    -----------------------------------------------
    db.records.createIndex({"score": 1});

    ### Create an Index on an Embedded Field
    -----------------------------------------------
    db.records.createIndex({"location.state": 1});

    ### Create an Index on an Embedded Document (whole)
    -----------------------------------------------
    db.records.createIndex({"location": 1});


// Sample Document
------------------------------------------------------------------------------------
{
 "_id": ObjectId(...),
 "item": "Banana",
 "category": ["food", "produce", "grocery"],
 "location": "4th Street Store",
 "stock": 4,
 "type": "cases"
}

------------------------------------------------------------------------------------
## Compound Indexes
------------------------------------------------------------------------------------
- A limit of 32 fields for any compound index
- supports queries that matches multiple fields
- Sort order can matter in determining whether the index can support a sort operation.

db.events.createIndex({"item": 1, "stock": 1});


------------------------------------------------------------------------------------
## Multikey Indexes
------------------------------------------------------------------------------------
- To add a field that holds an array value, MongoDB creates an index key for each element in the array.
- Multikey indexes support efficient queries against array fields.
- It can be constructed over arrays that holds both scalar values and nested documents.

- MongoDB automatically creates a multikey index if any indexed fields is an array


------------------------------------------------------------------------------------
## Text Indexes
------------------------------------------------------------------------------------
- Supports text search queries on string content
- Text indexes can include any field whose value is a string or an array of string elements
- A collection can only have one text search index, but that index can cover multiple fields.

db.reviews.createIndex({"comments": "text"});
db.reviews.createIndex({"subject": "text", "comments": "text"});

- A compound index can include text index key in combination with ascending/descending index keys.

    ### Setting default languages for Text Index
    -----------------------------------------------
    db.quotes.createIndex({"content": "text", "default_language": "spanish"});

    ### Specifying name to the Text Index
    -----------------------------------------------
    db.collection.createIndex({"content": "text", "users.comments": "text"}, {name: "myTextIndex"});

    ### Drop a Text Index using its name
    -----------------------------------------------
    db.collection.dropIndex("myTextIndex");


------------------------------------------------------------------------------------
## Hashed Indexes
------------------------------------------------------------------------------------
- Hashed indexes maintain entities with hases of the values of the indexed field.
- It supports sharding using hashed shard keys.
- Hashed indexes uses a hashing function to compute the hash of the value of the index field. 
- The hashing function collapses embedded documents and computes the hash for the entire value but does not support mulit-key indexes.

    ### Create a Hashed Index
    -----------------------------------------------
    db.collection.createIndex({"_id": "hashed"});
    
    ### Create a Compound Hashed Index
    -----------------------------------------------
    - To create a compound hashed index, specify hashed as the value of any single index key when creating the index.
    db.collection.createIndex({"fieldA": 1, "fieldB": "hashed", "fieldC": -1});