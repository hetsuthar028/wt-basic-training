db.stores.insertMany(
   [
     { _id: 1, name: "Java Hut", description: "Coffee and cakes" },
     { _id: 2, name: "Burger Buns", description: "Gourmet hamburgers" },
     { _id: 3, name: "Coffee Shop", description: "Just coffee" },
     { _id: 4, name: "Clothes Clothes Clothes", description: "Discount clothing" },
     { _id: 5, name: "Java Shopping", description: "Indonesian goods" }
   ]
)

# Create Text Index
------------------------------------------------------------------------------------
db.stores.createIndex({name: "text", description: "text"});


# Search for an Exact Phrase
------------------------------------------------------------------------------------
db.stores.find({ $text: {$search: "\"coffee shop \""}});


# Exclude a Term
------------------------------------------------------------------------------------
db.stores.find({ $text: {$search: "java shop -coffee"}});


# Sort the Results
------------------------------------------------------------------------------------
-- MongoDB will return its results in unsorted order by default. However, text search queries will compute a relevance score for each document that specifies how well a document matches the query.
-- To sort the results in order of relevance score, you must explicitly project the $meta textScore field and sort on it:

db.stores.find(
   { $text: { $search: "java coffee shop" } },
   { score: { $meta: "textScore" } }
).sort( { score: { $meta: "textScore" } } )